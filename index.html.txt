<!doctype html>
<html lang="ko">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>교복 착용 체크 – 사진·차트·학년 통계(단일 파일)</title>
<!-- Chart.js (CDN) -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
  :root {
    --bg: #f6f8fb; --card:#fff; --text:#0f172a; --muted:#64748b;
    --brand:#2563eb; --brand2:#1d4ed8; --ok:#16a34a; --no:#ef4444;
    --ring: rgba(37,99,235,.18); --shadow:0 10px 24px rgba(15,23,42,.06); --radius:16px;
  }
  html,body{height:100%} body{margin:0;background:var(--bg);color:var(--text);
    font-family:ui-sans-serif,system-ui,-apple-system,"Apple SD Gothic Neo","Noto Sans KR",Segoe UI,Roboto,Helvetica,Arial}
  .container{max-width:1180px;margin:22px auto 80px;padding:0 16px}
  .card{background:var(--card);border-radius:var(--radius);box-shadow:var(--shadow)}
  .header{display:flex;align-items:center;justify-content:space-between;gap:12px;padding:16px 18px}
  .title{display:flex;align-items:center;gap:10px;font-weight:800}
  .title .badge{font-size:22px}
  .muted{color:var(--muted)}
  .section{padding:16px 18px;border-top:1px solid #edf2f7}
  .row{display:flex;flex-wrap:wrap;gap:10px;align-items:center}
  .btn{appearance:none;border:1px solid #e5e7eb;background:#fff;color:var(--text);
    padding:9px 14px;border-radius:12px;cursor:pointer;font-weight:700;transition:.15s ease}
  .btn:hover{transform:translateY(-1px);border-color:#d1d5db}
  .btn.brand{background:var(--brand);border-color:var(--brand);color:#fff}
  .btn.brand:hover{background:var(--brand2)}
  .btn.ghost{background:transparent}
  .btn.small{padding:6px 10px;border-radius:10px}
  input[type="date"],select,input[type="text"]{border:1px solid #e5e7eb;border-radius:10px;padding:8px 10px;outline:0}
  input[type="date"]:focus,select:focus,input[type="text"]:focus{border-color:var(--brand);box-shadow:0 0 0 4px var(--ring)}
  .seg{display:inline-flex;background:#eef2ff;border-radius:12px;padding:4px}
  .seg .seg-btn{border:0;background:transparent;padding:7px 12px;border-radius:10px;cursor:pointer;font-weight:800;color:#334155}
  .seg .seg-btn.active{background:#fff;box-shadow:var(--shadow);color:#1d4ed8}
  .grid{display:grid;grid-template-columns:repeat(2,minmax(0,1fr));gap:10px}
  @media (min-width:720px){.grid{grid-template-columns:repeat(4,minmax(0,1fr))}}
  .student{display:flex;gap:10px;align-items:center;justify-content:space-between;padding:10px 12px;border:1px solid #e5e7eb;border-radius:14px;background:#fff;cursor:pointer}
  .student:hover{transform:translateY(-1px)}
  .student.on{border-color:rgba(22,163,74,.25);background:rgba(22,163,74,.06)}
  .student.off{border-color:rgba(239,68,68,.22);background:rgba(239,68,68,.05)}
  .name{font-weight:800}
  .state{font-size:18px}
  .thumb{width:44px;height:44px;border-radius:12px;object-fit:cover;background:#f1f5f9;border:1px solid #e5e7eb}
  .avatar{width:44px;height:44px;border-radius:12px;display:flex;align-items:center;justify-content:center;background:linear-gradient(135deg,#e2e8f0,#f8fafc);font-weight:900;color:#334155;border:1px solid #e5e7eb}
  .del{display:inline-flex;width:22px;height:22px;border-radius:50%;align-items:center;justify-content:center;background:#fee2e2;color:#b91c1c;margin-left:8px;font-weight:900}
  .controls{display:flex;flex-wrap:wrap;gap:10px;align-items:center}
  .pill{display:inline-flex;gap:6px;align-items:center;background:#f1f5f9;color:#0f172a;padding:6px 10px;border-radius:9999px;font-weight:800}
  .divider{height:1px;background:#edf2f7;margin:10px 0}
  .right{margin-left:auto}
  .hidden{display:none !important}
  .footer{font-size:13px}
  /* modal */
  .modal{position:fixed;inset:0;background:rgba(2,6,23,.45);display:none;align-items:center;justify-content:center;padding:18px}
  .modal.show{display:flex}
  .modal .box{background:#fff;border-radius:16px;width:100%;max-width:680px;box-shadow:var(--shadow)}
  .modal .box .hd{padding:14px 16px;border-bottom:1px solid #eef2f7;display:flex;align-items:center;justify-content:space-between}
  .modal .box .bd{padding:16px}
  .table{width:100%;border-collapse:collapse}
  .table th,.table td{border-bottom:1px solid #e5e7eb;padding:10px 8px;text-align:left}
  .table th{background:#f8fafc}
  .printable{padding:12px 16px}
  .warn{color:#b91c1c;font-weight:700}
  @media print {.no-print{display:none!important} body{background:#fff}.card{box-shadow:none}.printable{padding:0}}
  .disabled{opacity:.6; pointer-events:none}
</style>
</head>
<body>
<div class="container">
  <div class="card">
    <div class="header">
      <div class="title"><span class="badge">🧥</span><span>교복 착용 체크</span></div>
      <div class="row no-print">
        <span id="modePill" class="pill">🔓 읽기 모드</span>
        <button class="btn small" id="btn-teacher">🔒 교사 모드</button>
        <button class="btn small" id="btn-settings">⚙️ 설정</button>
        <button class="btn small" id="btn-print">🖨️ 인쇄</button>
        <a class="btn small ghost" href="https://gptonline.ai/ko/" target="_blank" rel="noopener">한국형 GPT</a>
      </div>
    </div>

    <!-- 상단 컨트롤 -->
    <div class="section">
      <div class="row controls">
        <label>날짜</label><input type="date" id="dateInput">
        <span class="pill" id="summaryPill">총 0명 · ✅ 0</span>
        <div class="right no-print">
          <button class="btn small" id="btn-download">💾 JSON 저장</button>
          <button class="btn small brand" id="btn-save-github">⬆️ GitHub 저장</button>
        </div>
      </div>
    </div>

    <!-- 학년/반 버튼 + 검색/편집 -->
    <div class="section">
      <div class="row" style="justify-content:space-between;gap:8px">
        <div class="seg no-print" id="seg-grade"></div>
        <div class="seg no-print" id="seg-class"></div>
        <div class="controls no-print">
          <input type="text" id="searchInput" placeholder="학생 이름 검색" style="min-width:180px">
          <label class="row" style="gap:6px"><input type="checkbox" id="ckOnlyChecked"><span class="muted">✅만</span></label>
          <button class="btn small" id="btn-add">학생 추가</button>
          <button class="btn small" id="btn-edit">편집 모드</button>
          <button class="btn small" id="btn-select-all">전체 선택</button>
          <button class="btn small" id="btn-clear">전체 해제</button>
          <button class="btn small" id="btn-photo-bulk">📷 일괄 업로드</button>
          <button class="btn small" id="btn-photo-clear">🧹 사진 모두 제거</button>
          <input type="file" id="file-photo-bulk" class="hidden" accept="image/*" multiple>
        </div>
      </div>
      <div class="divider"></div>
      <div class="grid printable" id="studentsGrid"></div>
    </div>

    <!-- 월별 통계(반) -->
    <div class="section no-print">
      <div class="row" style="justify-content:space-between;gap:8px">
        <div class="row" style="gap:12px">
          <strong>📊 월별 통계 – 현재 반</strong>
          <input type="month" id="monthInput">
        </div>
        <div class="row">
          <button class="btn small" id="btn-stat-local">로컬에서 계산</button>
          <button class="btn small" id="btn-stat-github">GitHub에서 불러오기</button>
          <button class="btn small" id="btn-stat-csv">CSV로 내보내기</button>
        </div>
      </div>
      <div class="divider"></div>
      <div class="row" style="gap:18px;align-items:flex-start">
        <div style="flex:1;min-width:320px"><canvas id="chartClass" height="140"></canvas></div>
        <div style="flex:1;min-width:320px;overflow:auto">
          <table class="table" id="statTable">
            <thead><tr><th>번호</th><th>이름</th><th>월 누적(✅)</th></tr></thead>
            <tbody></tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- 학년 전체 통계 -->
    <div class="section">
      <div class="row" style="justify-content:space-between;gap:8px">
        <div class="row" style="gap:12px">
          <strong>🏫 학년 전체 통계</strong>
          <span id="gradeLabel" class="pill">1학년</span>
          <input type="month" id="gradeMonthInput">
        </div>
        <div class="row no-print">
          <button class="btn small" id="btn-grade-local">로컬에서 계산</button>
          <button class="btn small" id="btn-grade-github">GitHub에서 불러오기</button>
          <button class="btn small" id="btn-grade-csv">CSV로 내보내기</button>
        </div>
      </div>
      <div class="divider"></div>
      <div class="row" style="gap:18px;align-items:flex-start">
        <div style="flex:1;min-width:320px"><canvas id="chartGrade" height="140"></canvas></div>
        <div style="flex:1;min-width:320px;overflow:auto">
          <table class="table" id="gradeTable">
            <thead><tr><th>반</th><th>파일 수(일수)</th><th>월 누적(✅ 합계)</th></tr></thead>
            <tbody></tbody>
          </table>
        </div>
      </div>
    </div>

    <div class="section footer">
      <span class="muted">※ 기본은 공개 읽기 전용. 🔒교사 모드에서만 체크/편집/저장이 가능하며, GitHub 저장에는 PAT이 필요합니다.</span>
    </div>
  </div>
</div>

<!-- 설정 모달 -->
<div class="modal" id="modal">
  <div class="box">
    <div class="hd">
      <strong>저장소/보호 설정</strong>
      <button class="btn small" id="btn-close-modal">닫기</button>
    </div>
    <div class="bd">
      <div class="row" style="gap:14px;margin-bottom:10px"><label style="min-width:160px">GitHub Owner</label><input type="text" id="ghOwner" placeholder="e.g. your-id" style="flex:1"></div>
      <div class="row" style="gap:14px;margin-bottom:10px"><label style="min-width:160px">Repository</label><input type="text" id="ghRepo" placeholder="e.g. uniform-checker-data" style="flex:1"></div>
      <div class="row" style="gap:14px;margin-bottom:10px"><label style="min-width:160px">Branch</label><input type="text" id="ghBranch" value="main" style="flex:1"></div>
      <div class="row" style="gap:14px;margin-bottom:10px"><label style="min-width:160px">Base Path</label><input type="text" id="ghBase" value="data" style="flex:1"></div>
      <div class="row" style="gap:14px;margin-bottom:10px"><label style="min-width:160px">Personal Access Token</label><input type="password" id="ghToken" placeholder="ghp_..." style="flex:1"></div>
      <div class="row" style="gap:14px;margin:16px 0"><label style="min-width:160px">교사 모드 PIN (선택)</label><input type="password" id="teacherPin" placeholder="설정 시 필요" style="flex:1"></div>
      <div class="row">
        <button class="btn small brand" id="btn-save-settings">설정 저장</button>
        <button class="btn small" id="btn-reset-settings">설정 초기화</button>
        <span class="muted">※ fine-grained 토큰 + <span style="font-family:ui-monospace">contents:write</span> 권장</span>
      </div>
      <div class="row" style="margin-top:10px">
        <span class="warn">PIN은 간단한 보호 수단일 뿐, 보안 기능이 아닙니다.</span>
      </div>
    </div>
  </div>
</div>

<script>
/* ====================== 기본 데이터 ====================== */
const DEFAULT_ROSTERS = {
  "1-1":["고수민","구주영","길선수","김가원","김다함","김수빈","김태석","김태희","김하은","문지민","박선웅","박소영","송건영","윤대원","윤현우","이가빈","이수현","이정민","정지우","정찬용","지의민","황가온"],
  "1-2":["공병호","길빈나","김영민","김하윤","박범국","신관우","용수빈","윤태희","이나경","이민주","이윤아","이정훈","임서후","임준우","장서연","장지훈","전사명","전상민","조은","주솔빈","지수연","최지유","한동하"],
  "1-3":["강지호","김민정","김상욱","김용식","김주현","김지환","김효인","박서연","박은빈","박찬준","백성현","신소연","심현률","안예진","안지영","오유준","윤강산","윤세영","윤시후","이수아","정예서","한지민","남궁동환"],
  "2-1":["고은혜","구승모","김나경","김준호","김채민","김현빈","김희서","도가영","민수연","박예솔","박지홍","송진성","이슬비","이주현","이준혁","이청하","이형진","조민서","조유빈","조은찬","하승호"],
  "2-3":["길경림","길나연","길혜미","김가은","김우철","김원호","김지우","김효우","박진엽","손민정","안예원","양희백","오지유","용하은","유온유","유재웅","이유빈","이차윤","정민준","조인섭","최가인","최소영","한지영","현지성"],
  "3-1":["고경민","김규연","김보훈","김선우","김시은","김찬현","김효정","박영욱","박윤성","박지우","백서현","송정환","이서윤","이서현","이유준","이은비","이은진","이하영","장수민","정재역","조중현","최윤서","최희수"],
  "3-2":["김단오","김민엽","김유나","김재원","김호연","남대호","박찬현","복선영","손지민","신가원","엄소율","오채현","용현빈","우다연","유수연","이서원","이은우","장서진","장수민","장영민","정시연","정지민","주가영"],
  "3-3":["강태이","김동연","김동현","김수민","김어진","김종빈","김주환","김준혁","김태하","노단비","민한빛","박시은","박종우","변현정","송재민","이예린","이은서","이해인","이현서","임슬비","장원빈","장지혜","최은진"]
};
const GRADES = {"1학년":["1","2","3"], "2학년":["1","3"], "3학년":["1","2","3"]};
const LS_ROSTERS="uniform_rosters", LS_SETTINGS="uniform_gh_settings", LS_LOGS="uniform_logs", LS_PHOTOS="uniform_photos", LS_PIN="uniform_teacher_pin";

/* ====================== 상태 ====================== */
let state = {
  grade: "1학년", cls: "1-1", date: todayStr(),
  editMode: false, filterText: "", onlyChecked: false, checks: {}, teacherMode: false
};
let ROSTERS = load(LS_ROSTERS) || {...DEFAULT_ROSTERS};
let PHOTOS = load(LS_PHOTOS) || {}; // { "1-1": { "홍길동": dataUrl } }
let SETTINGS = load(LS_SETTINGS) || {owner:"",repo:"",branch:"main",base:"data",token:""};
let TEACHER_PIN = localStorage.getItem(LS_PIN) || "";

/* ====================== 도우미 ====================== */
function load(k){try{return JSON.parse(localStorage.getItem(k)||"")}catch{ return null }}
function save(k,v){localStorage.setItem(k,JSON.stringify(v))}
function classKey(grade,ban){return `${grade.replace("학년","")}-${ban}`}
function rosterFor(cls){return ROSTERS[cls]||[]}
function getPhoto(cls,name){return (PHOTOS[cls]&&PHOTOS[cls][name])||null}
function setPhoto(cls,name,dataUrl){PHOTOS[cls]=PHOTOS[cls]||{};PHOTOS[cls][name]=dataUrl;save(LS_PHOTOS,PHOTOS)}
function clearPhotos(cls){if(PHOTOS[cls]){delete PHOTOS[cls];save(LS_PHOTOS,PHOTOS)}}
function todayStr(){const d=new Date();return d.toISOString().slice(0,10)}
function monthStr(d){return `${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,"0")}`}
function byId(id){return document.getElementById(id)}
function setDisabled(el,disabled){ if(disabled) el.classList.add("disabled"); else el.classList.remove("disabled"); el.disabled=!!disabled; }

/* ====================== 요소 바인딩 ====================== */
const segGrade = byId("seg-grade"), segClass = byId("seg-class"), grid = byId("studentsGrid");
const summaryPill = byId("summaryPill"), dateInput = byId("dateInput");
const searchInput = byId("searchInput"), ckOnlyChecked = byId("ckOnlyChecked");
const btnAdd = byId("btn-add");
const btnEdit = byId("btn-edit"), btnSelectAll = byId("btn-select-all"), btnClear=byId("btn-clear");
const btnDownload = byId("btn-download"), btnSaveGh=byId("btn-save-github"), btnPrint=byId("btn-print");
const btnPhotoBulk=byId("btn-photo-bulk"), filePhotoBulk=byId("file-photo-bulk"), btnPhotoClear=byId("btn-photo-clear");
const monthInput=byId("monthInput"), statTable=byId("statTable").querySelector("tbody");
const btnStatLocal=byId("btn-stat-local"), btnStatGithub=byId("btn-stat-github"), btnStatCsv=byId("btn-stat-csv");
const gradeLabel=byId("gradeLabel"), gradeMonthInput=byId("gradeMonthInput");
const btnGradeLocal=byId("btn-grade-local"), btnGradeGithub=byId("btn-grade-github"), btnGradeCsv=byId("btn-grade-csv");
const chartClassCtx=byId("chartClass").getContext("2d"), chartGradeCtx=byId("chartGrade").getContext("2d");
const modePill = byId("modePill"), btnTeacher = byId("btn-teacher");
let chartClass, chartGrade;

/* ====================== UI 렌더 ====================== */
dateInput.value = state.date; monthInput.value = monthStr(new Date()); gradeMonthInput.value = monthStr(new Date());
renderGrades(); renderClasses(); renderStudents(); updateGradeLabel(); updateModeUI();

function renderGrades(){
  segGrade.innerHTML=""; Object.keys(GRADES).forEach(g=>{
    const b=document.createElement("button");
    b.className="seg-btn"+(state.grade===g?" active":""); b.textContent=g;
    b.onclick=()=>{ state.grade=g; if(!GRADES[g].includes(state.cls.split("-")[1])) state.cls=classKey(g,GRADES[g][0]); else state.cls=classKey(g,state.cls.split("-")[1]); state.checks={}; renderGrades(); renderClasses(); renderStudents(); updateGradeLabel(); };
    segGrade.appendChild(b);
  });
}
function renderClasses(){
  segClass.innerHTML=""; (GRADES[state.grade]||[]).forEach(ban=>{
    const key=classKey(state.grade,ban);
    const b=document.createElement("button");
    b.className="seg-btn"+(state.cls===key?" active":""); b.textContent=`${state.grade.replace("학년","")}-${ban}반`;
    b.onclick=()=>{ state.cls=key; state.checks={}; renderClasses(); renderStudents(); };
    segClass.appendChild(b);
  });
}
function renderStudents(){
  grid.innerHTML=""; const roster = rosterFor(state.cls);
  const q=state.filterText.trim();
  const items = roster.map((n,i)=>({no:i+1,name:n,on:!!state.checks[n]}))
    .filter(x=>!q || x.name.includes(q)).filter(x=>!state.onlyChecked || x.on);
  const total = roster.length, onCount = Object.values(state.checks).filter(Boolean).length;
  summaryPill.textContent = `총 ${total}명 · ✅ ${onCount}`;

  items.forEach(({no,name,on})=>{
    const div=document.createElement("div"); div.className="student "+(on?"on":"off")+(state.editMode?" edit":"");
    div.onclick=()=>{ if(!state.teacherMode) return alert("교사 모드에서만 체크할 수 있습니다."); if(state.editMode) return; state.checks[name]=!state.checks[name]; renderStudents(); };

    const left=document.createElement("div"); left.style.display="flex"; left.style.alignItems="center"; left.style.gap="10px";
    const imgUrl = getPhoto(state.cls,name);
    let thumb; if(imgUrl){ thumb=document.createElement("img"); thumb.className="thumb"; thumb.src=imgUrl; }
    else { thumb=document.createElement("div"); thumb.className="avatar"; thumb.textContent=(name[0]||"?"); }
    left.appendChild(thumb);

    const nm=document.createElement("div"); nm.className="name"; nm.innerHTML=`<span class="muted" style="margin-right:8px">${no}번</span>${name}`;
    left.appendChild(nm);

    if(state.editMode && state.teacherMode){
      const del=document.createElement("span"); del.className="del"; del.title="삭제"; del.textContent="×";
      del.onclick=(e)=>{ e.stopPropagation(); if(!confirm(`${name} 학생을 삭제할까요?`)) return;
        const r=rosterFor(state.cls).slice(); const idx=r.indexOf(name); if(idx>=0) r.splice(idx,1);
        ROSTERS[state.cls]=r; save(LS_ROSTERS,ROSTERS); delete state.checks[name];
        if(PHOTOS[state.cls] && PHOTOS[state.cls][name]) { delete PHOTOS[state.cls][name]; save(LS_PHOTOS,PHOTOS); }
        renderStudents(); };
      left.appendChild(del);

      const cam=document.createElement("button"); cam.className="btn small"; cam.textContent="📷 사진"; cam.style.marginLeft="6px";
      cam.onclick=async(e)=>{ e.stopPropagation(); const file = await pickImage(); if(!file) return; const dataUrl = await toThumb(file, 180); setPhoto(state.cls,name,dataUrl); renderStudents(); };
      left.appendChild(cam);
    }

    const right=document.createElement("div"); right.className="state"; right.textContent = on? "✅":"❌";
    div.appendChild(left); div.appendChild(right); grid.appendChild(div);
  });
}
function updateGradeLabel(){ gradeLabel.textContent = state.grade; }
function updateModeUI(){
  modePill.textContent = state.teacherMode ? "🔐 교사 모드" : "🔓 읽기 모드";
  setDisabled(btnAdd, !state.teacherMode);
  setDisabled(btnEdit, !state.teacherMode);
  setDisabled(btnSelectAll, !state.teacherMode);
  setDisabled(btnClear, !state.teacherMode);
  setDisabled(btnPhotoBulk, !state.teacherMode);
  setDisabled(btnPhotoClear, !state.teacherMode);
  setDisabled(btnSaveGh, !state.teacherMode);
}

/* ====================== 이벤트 ====================== */
byId("btn-settings").onclick=()=>openSettings(); btnPrint.onclick=()=>window.print();
dateInput.onchange=()=>{ state.date=dateInput.value; };
searchInput.oninput=()=>{ state.filterText=searchInput.value; renderStudents(); };
ckOnlyChecked.onchange=()=>{ state.onlyChecked=ckOnlyChecked.checked; renderStudents(); };

btnTeacher.onclick=()=>{
  if(state.teacherMode){
    if(confirm("교사 모드를 종료할까요?")){ state.teacherMode=false; state.editMode=false; btnEdit.textContent="편집 모드"; updateModeUI(); renderStudents(); }
    return;
  }
  if(TEACHER_PIN){
    const given = prompt("교사 모드 PIN을 입력하세요:");
    if(given===null) return;
    if(given===TEACHER_PIN){ state.teacherMode=true; updateModeUI(); alert("교사 모드 활성화"); }
    else alert("PIN이 올바르지 않습니다.");
  } else {
    if(confirm("PIN이 설정되어 있지 않습니다. 교사 모드를 활성화할까요?")){ state.teacherMode=true; updateModeUI(); }
  }
};

btnAdd.onclick=()=>{ if(!state.teacherMode) return alert("교사 모드에서만 추가할 수 있습니다.");
  const name=(searchInput.value||"").trim();
  if(!name) return alert("추가할 학생 이름을 입력하세요.");
  const r=rosterFor(state.cls).slice();
  if(r.includes(name)) return alert("이미 명단에 있습니다.");
  r.push(name); ROSTERS[state.cls]=r; save(LS_ROSTERS,ROSTERS); searchInput.value=""; state.filterText=""; renderStudents();
};
searchInput.addEventListener("keydown",(e)=>{ if(e.key==="Enter") btnAdd.click(); });

btnEdit.onclick=()=>{ if(!state.teacherMode) return alert("교사 모드에서만 편집할 수 있습니다."); state.editMode=!state.editMode; btnEdit.textContent = state.editMode? "편집 종료":"편집 모드"; renderStudents(); };
btnSelectAll.onclick=()=>{ if(!state.teacherMode) return; rosterFor(state.cls).forEach(n=>state.checks[n]=true); renderStudents(); };
btnClear.onclick=()=>{ if(!state.teacherMode) return; state.checks={}; renderStudents(); };

btnPhotoBulk.onclick=()=>{ if(!state.teacherMode) return; filePhotoBulk.click(); };
filePhotoBulk.onchange=async()=>{ if(!state.teacherMode) return; const files=[...filePhotoBulk.files]; if(!files.length) return;
  const roster = rosterFor(state.cls); const notMatched=[];
  for (const f of files){
    const dataUrl = await toThumb(f, 180);
    const guess = roster.find(n => f.name.includes(n));
    if (guess) setPhoto(state.cls, guess, dataUrl); else notMatched.push(f.name);
  }
  if (notMatched.length) alert("이름이 파일명에 없는 항목:\n- "+notMatched.join("\n"));
  renderStudents();
};
btnPhotoClear.onclick=()=>{ if(!state.teacherMode) return; if(!confirm("이 반의 모든 사진을 제거할까요?")) return; clearPhotos(state.cls); renderStudents(); };

btnDownload.onclick=()=>{ const payload=buildPayload(); const blob=new Blob([JSON.stringify(payload,null,2)],{type:"application/json"});
  const a=document.createElement("a"); a.href=URL.createObjectURL(blob); a.download=`${state.date}_${state.cls}.json`; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(a.href);
};

/* ====================== GitHub 저장 ====================== */
function openSettings(){
  const m=byId("modal"); m.classList.add("show");
  byId("ghOwner").value = SETTINGS.owner||""; byId("ghRepo").value=SETTINGS.repo||"";
  byId("ghBranch").value=SETTINGS.branch||"main"; byId("ghBase").value=SETTINGS.base||"data"; byId("ghToken").value=SETTINGS.token||"";
  byId("teacherPin").value = TEACHER_PIN || "";
}
byId("btn-close-modal").onclick=()=>byId("modal").classList.remove("show");
byId("btn-save-settings").onclick=()=>{ 
  SETTINGS={ owner:byId("ghOwner").value.trim(), repo:byId("ghRepo").value.trim(),
    branch:byId("ghBranch").value.trim()||"main", base:byId("ghBase").value.trim()||"data",
    token:byId("ghToken").value.trim() };
  save(LS_SETTINGS,SETTINGS);
  TEACHER_PIN = byId("teacherPin").value.trim();
  if(TEACHER_PIN) localStorage.setItem(LS_PIN, TEACHER_PIN); else localStorage.removeItem(LS_PIN);
  byId("modal").classList.remove("show"); alert("설정 저장 완료");
};
byId("btn-reset-settings").onclick=()=>{ if(!confirm("설정을 초기화할까요?")) return; SETTINGS={owner:"",repo:"",branch:"main",base:"data",token:""}; save(LS_SETTINGS,SETTINGS); localStorage.removeItem(LS_PIN); TEACHER_PIN=""; byId("modal").classList.remove("show"); };

btnSaveGh.onclick=saveToGitHub;
async function saveToGitHub(){
  if(!state.teacherMode) return alert("교사 모드에서만 저장할 수 있습니다.");
  const {owner,repo,branch,base,token}=SETTINGS;
  if(!owner||!repo||!token){alert("설정(Owner/Repo/Token)을 먼저 저장하세요.");return;}
  const path = `${base}/${state.date}/${state.cls}.json`;
  const url = `https://api.github.com/repos/${owner}/${repo}/contents/${encodeURIComponent(path)}`;
  let sha=undefined;
  const getRes = await fetch(`${url}?ref=${encodeURIComponent(branch)}`,{headers:{Authorization:`Bearer ${token}`,Accept:"application/vnd.github+json"}});
  if(getRes.status===200){ const j=await getRes.json(); sha=j.sha; }
  const content = btoa(unescape(encodeURIComponent(JSON.stringify(buildPayload(),null,2))));
  const body = {message:`Uniform check: ${state.date} ${state.cls}`, content, branch, sha };
  const res = await fetch(url,{method:"PUT",headers:{Authorization:`Bearer ${token}`,"Content-Type":"application/json",Accept:"application/vnd.github+json"},body:JSON.stringify(body)});
  if(res.ok){
    const logs = load(LS_LOGS)||[]; logs.push({...buildPayload(), savedAt:new Date().toISOString()}); save(LS_LOGS,logs);
    alert("GitHub 저장 성공!");
  } else {
    alert("저장 실패: "+await res.text());
  }
}
function buildPayload(){
  const roster = rosterFor(state.cls);
  const items = roster.map((name,i)=>({no:i+1,name,worn:!!state.checks[name]}));
  const worn = items.filter(x=>x.worn).length;
  return { date:state.date, class:state.cls, total:roster.length, worn, rate: roster.length? Math.round(100*worn/roster.length):0, items };
}

/* ====================== 월별 통계(반) ====================== */
let chartClass=null, chartGrade=null, classCountsCache=null, gradeAggCache=null;
byId("btn-stat-local").onclick=()=>{ const {counts, roster}=calcClassLocal(); classCountsCache=counts; renderStatTable(counts, roster); drawClassChart(counts, roster); };
byId("btn-stat-github").onclick=async()=>{ const r=await calcClassFromGitHub(); if(!r) return; classCountsCache=r.counts; renderStatTable(r.counts, r.roster); drawClassChart(r.counts, r.roster); };
byId("btn-stat-csv").onclick=()=>{ const roster = rosterFor(state.cls); const rows=[["번호","이름","월 누적(✅)"]]; roster.forEach((n,i)=>rows.push([i+1,n,(classCountsCache&&classCountsCache[n])||0])); downloadCSV(rows,`stats_${state.cls}_${monthInput.value||monthStr(new Date())}.csv`); };

function calcClassLocal(){
  const month=(byId("monthInput").value||monthStr(new Date()));
  const logs = load(LS_LOGS)||[];
  const cls=state.cls, roster=rosterFor(cls), counts={};
  logs.filter(l=>l.class===cls && (l.date||"").startsWith(month)).forEach(l=>{
    l.items.forEach(it=>{ if(it.worn) counts[it.name]=(counts[it.name]||0)+1; });
  });
  return {counts, roster};
}
async function calcClassFromGitHub(){
  const {owner,repo,branch,base,token}=SETTINGS;
  if(!owner||!repo||!token){alert("GitHub 설정이 필요합니다.");return null;}
  const month=(byId("monthInput").value||monthStr(new Date()));
  const pathPrefix=`${base}/${month}`;
  const b=await fetch(`https://api.github.com/repos/${owner}/${repo}/branches/${encodeURIComponent(branch)}`,{headers:{Authorization:`Bearer ${token}`,Accept:"application/vnd.github+json"}}); if(!b.ok){alert("브랜치 정보를 불러오지 못했습니다.");return null;}
  const sha=(await b.json()).commit?.sha;
  const t=await fetch(`https://api.github.com/repos/${owner}/${repo}/git/trees/${sha}?recursive=1`,{headers:{Authorization:`Bearer ${token}`,Accept:"application/vnd.github+json"}}); if(!t.ok){alert("파일 트리를 불러오지 못했습니다.");return null;}
  const list=(await t.json()).tree||[];
  const targets=list.filter(n=>n.type==="blob" && n.path.startsWith(pathPrefix) && n.path.endsWith(`${state.cls}.json`));
  const counts={}, roster=rosterFor(state.cls);
  for(const n of targets){
    const raw=`https://raw.githubusercontent.com/${owner}/${repo}/${encodeURIComponent(branch)}/${n.path}`;
    const j=await (await fetch(raw)).json().catch(()=>null); if(!j||!j.items) continue;
    j.items.forEach(it=>{ if(it.worn) counts[it.name]=(counts[it.name]||0) + 1; });
  }
  return {counts, roster};
}
function renderStatTable(counts, roster){
  statTable.innerHTML=""; roster.forEach((n,i)=>{ const tr=document.createElement("tr"); tr.innerHTML=`<td>${i+1}</td><td>${n}</td><td>${counts[n]||0}</td>`; statTable.appendChild(tr); });
}
function drawClassChart(counts, roster){
  const labels=roster; const data=labels.map(n=>counts[n]||0);
  if(chartClass) chartClass.destroy();
  chartClass=new Chart(chartClassCtx,{ type:"bar", data:{labels, datasets:[{label:`${(byId("monthInput").value||monthStr(new Date()))} ${state.cls} 월 누적(✅)`, data}]}, options:{plugins:{legend:{display:false}}, scales:{y:{beginAtZero:true}}});
}

/* ====================== 학년 전체 통계 ====================== */
byId("btn-grade-local").onclick=()=>{ gradeAggCache=calcGradeLocal(); renderGradeTable(gradeAggCache); drawGradeChart(gradeAggCache); };
byId("btn-grade-github").onclick=async()=>{ gradeAggCache=await calcGradeFromGitHub(); if(!gradeAggCache) return; renderGradeTable(gradeAggCache); drawGradeChart(gradeAggCache); };
byId("btn-grade-csv").onclick=()=>{ if(!gradeAggCache){alert("먼저 통계를 계산하세요.");return;} const rows=[["반","파일 수(일수)","월 누적(✅ 합계)"]]; gradeAggCache.rows.forEach(r=>rows.push([r.cls,r.files,r.total])); downloadCSV(rows,`grade_${state.grade}_${byId("gradeMonthInput").value||monthStr(new Date())}.csv`); };

function calcGradeLocal(){
  const month=(byId("gradeMonthInput").value||monthStr(new Date()));
  const logs=load(LS_LOGS)||[]; const grade=state.grade; const bans=GRADES[grade]||[];
  const rows=[]; bans.forEach(ban=>{
    const cls=classKey(grade,ban);
    const filtered=logs.filter(l=>l.class===cls && (l.date||"").startsWith(month));
    let total=0; filtered.forEach(l=>{ l.items.forEach(it=>{ if(it.worn) total++; }); });
    rows.push({cls, files: new Set(filtered.map(l=>l.date)).size, total});
  });
  return { rows };
}
async function calcGradeFromGitHub(){
  const {owner,repo,branch,base,token}=SETTINGS; if(!owner||!repo||!token){alert("GitHub 설정이 필요합니다.");return null;}
  const month=(byId("gradeMonthInput").value||monthStr(new Date())); const grade=state.grade; const bans=GRADES[grade]||[];
  const b=await fetch(`https://api.github.com/repos/${owner}/${repo}/branches/${encodeURIComponent(branch)}`,{headers:{Authorization:`Bearer ${token}`,Accept:"application/vnd.github+json"}}); if(!b.ok){alert("브랜치 정보를 불러오지 못했습니다.");return null;}
  const sha=(await b.json()).commit?.sha;
  const t=await fetch(`https://api.github.com/repos/${owner}/${repo}/git/trees/${sha}?recursive=1`,{headers:{Authorization:`Bearer ${token}`,Accept:"application/vnd.github+json"}}); if(!t.ok){alert("파일 트리를 불러오지 못했습니다.");return null;}
  const list=(await t.json()).tree||[]; const rows=[];
  for(const ban of bans){
    const cls=classKey(grade,ban); const prefix=`${base}/${month}/`; const targets=list.filter(n=>n.type==="blob" && n.path.startsWith(prefix) && n.path.endsWith(`${cls}.json`));
    let total=0; const dates=new Set();
    for(const n of targets){
      const raw=`https://raw.githubusercontent.com/${owner}/${repo}/${encodeURIComponent(branch)}/${n.path}`;
      const j=await (await fetch(raw)).json().catch(()=>null); if(!j||!j.items||!j.date) continue;
      dates.add(j.date); j.items.forEach(it=>{ if(it.worn) total++; });
    }
    rows.push({cls, files:dates.size, total});
  }
  return { rows };
}
function renderGradeTable(agg){
  const tb=document.getElementById("gradeTable").querySelector("tbody"); tb.innerHTML="";
  agg.rows.forEach(r=>{ const tr=document.createElement("tr"); tr.innerHTML=`<td>${r.cls}</td><td>${r.files}</td><td>${r.total}</td>`; tb.appendChild(tr); });
}
function drawGradeChart(agg){
  const labels=agg.rows.map(r=>r.cls); const data=agg.rows.map(r=>r.total);
  if(chartGrade) chartGrade.destroy();
  chartGrade=new Chart(chartGradeCtx,{type:"bar",data:{labels,datasets:[{label:`${(byId("gradeMonthInput").value||monthStr(new Date()))} ${state.grade} 월 누적(✅ 합계)`,data} ]},options:{plugins:{legend:{display:false}},scales:{y:{beginAtZero:true}}}});
}

/* ====================== 유틸 ====================== */
function downloadCSV(rows, filename){
  const csv = rows.map(r=>r.map(v=>`"${String(v).replace(/"/g,'""')}"`).join(",")).join("\n");
  const blob=new Blob([csv],{type:"text/csv;charset=utf-8"}); const a=document.createElement("a");
  a.href=URL.createObjectURL(blob); a.download=filename; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(a.href);
}
function pickImage(){ return new Promise(res=>{ const i=document.createElement("input"); i.type="file"; i.accept="image/*"; i.onchange=()=>res(i.files[0]||null); i.click(); }); }
function toThumb(file, size=180){
  return new Promise((resolve,reject)=>{
    const img=new Image(); const fr=new FileReader();
    fr.onload=()=>{ img.onload=()=>{ 
        const canvas=document.createElement("canvas"); const s=size; canvas.width=s; canvas.height=s; 
        const ctx=canvas.getContext("2d"); ctx.fillStyle="#fff"; ctx.fillRect(0,0,s,s);
        const r = Math.min(s/img.width, s/img.height); const w=img.width*r, h=img.height*r;
        ctx.drawImage(img,(s-w)/2,(s-h)/2,w,h); resolve(canvas.toDataURL("image/jpeg",0.86));
      }; img.onerror=reject; img.src=fr.result; 
    }; fr.onerror=reject; fr.readAsDataURL(file);
  });
}

/* ====================== 시작 ====================== */
function updateGradeLabel(){ gradeLabel.textContent = state.grade; }
function init(){ dateInput.value = state.date; }
init();
</script>
</body>
</html>
